module Main (main) where

-- import Data.Time.Clock
--   ( NominalDiffTime,
--     diffUTCTime,
--     getCurrentTime,
--   )
import Math.NumberTheory.Roots

-- import GHC.Environment (getFullArgs)

main :: IO ()
main = do
  -- putStrLn "Hello"
  -- -- putStrLn "Searching all args..."
  -- -- args <- getFullArgs
  -- -- print args

  -- putStrLn "               "
  -- putStrLn "integerSquareRoot "
  let x = integerSquareRoot 229292494949949499494283877737737183885939993929924299100329994728193939495959697987771773747747477478828288484858588585853838838371713363663636363636363636229292494949949499494283877737737183885939993929924299100329994728193939495959697987771773747747477478828288484858588585853838838371713363663636363636363636229292494949949499494283877737737183885939993929924299100329994728193939495959697987771773747747477478828288484858588585853838838371713363663636363636363636229292494949949499494283877737737183885939993929924299100329994728193939495959697987771773747747477478828288484858588585853838838371713363663636363636363636::Integer
  -- let y = integerSquareRootnteger
  -- let z = integerSquareRootnteger
  --y2 <- timeitNonIO x
  --print y2
  print x
  -- print y
  -- print z
  
-- -- | Helper function
-- timeit :: IO a -> IO (Maybe a, NominalDiffTime)
-- timeit action = do
--   start <- getCurrentTime
--   value <- action
--   end <- getCurrentTime
--   pure (Just value, diffUTCTime end start)

-- timeitNonIO :: a -> IO (Maybe a, NominalDiffTime)
-- timeitNonIO action = do
--   start <- getCurrentTime
--   let value = action
--   end <- getCurrentTime
--   pure (Just value, diffUTCTime end start)
